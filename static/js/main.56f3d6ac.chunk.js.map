{"version":3,"sources":["CharacterList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["CharacterList","this","props","school","characters","Header","as","Item","Group","map","c","Icon","name","size","Content","Meta","age","height","Component","App","className","id","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iWA0CeA,E,iLA1BH,IAAD,EACwBC,KAAKC,MAA5BC,EADD,EACCA,OAAQC,EADT,EACSA,WAEhB,OACE,oCACE,kBAACC,EAAA,EAAD,CAAQC,GAAG,MAAMH,GACjB,kBAACI,EAAA,EAAKC,MAAN,KACGJ,EAAWK,KAAI,SAAAC,GAAC,OACf,kBAACH,EAAA,EAAD,KACE,kBAACI,EAAA,EAAD,CAAMC,KAAK,cAAcC,KAAK,SAC9B,kBAACN,EAAA,EAAKO,QAAN,KACE,kBAACP,EAAA,EAAKF,OAAN,KAAcK,EAAEE,MAChB,kBAACL,EAAA,EAAKQ,KAAN,KAAYL,EAAEM,IAAd,UACA,kBAACT,EAAA,EAAKQ,KAAN,KACGL,EAAEO,OAASP,EAAEO,OAAS,MADzB,iB,GAdYC,aCwBbC,E,iLAXX,OACE,yBAAKC,UAAU,aACb,gCACE,gHAEF,kBAAC,EAAD,CAAejB,OAAO,iCAAQC,WAzBF,CAC9B,CACEiB,GAAI,EACJT,KAAM,4BACNI,IAAK,GACLC,OAAQ,KAEV,CACEI,GAAI,EACJT,KAAM,kCACNI,IAAK,GACLC,OAAQ,KAEV,CACEI,GAAI,EACJT,KAAM,sBACNI,IAAK,Y,GAlBKE,aCMEI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDgI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.56f3d6ac.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Header, Icon, Item } from 'semantic-ui-react';\n\nexport interface Character {\n  id: number;\n  name: string;\n  age: number;\n  height?: number;\n}\n\ninterface CharacterListProps {\n  school: string;\n  characters: Character[];\n}\n\nclass CharacterList extends Component<CharacterListProps> {\n  render() {\n    const { school, characters } = this.props;\n\n    return (\n      <>\n        <Header as=\"h2\">{school}</Header>\n        <Item.Group>\n          {characters.map(c => (\n            <Item>\n              <Icon name=\"user circle\" size=\"huge\" />\n              <Item.Content>\n                <Item.Header>{c.name}</Item.Header>\n                <Item.Meta>{c.age}歳</Item.Meta>\n                <Item.Meta>\n                  {c.height ? c.height : \"???\"}\n                  cm\n                </Item.Meta>\n              </Item.Content>\n            </Item>\n          ))}\n        </Item.Group>\n      </>\n    );\n  }\n}\n\nexport default CharacterList;\n","import './App.css';\n\nimport React, { Component } from 'react';\n\nimport CharacterList, { Character } from './CharacterList';\n\nclass App extends Component {\n  render() {\n    const characters: Character[] = [\n      {\n        id: 1,\n        name: \"羽咲 綾乃\",\n        age: 16,\n        height: 151\n      },\n      {\n        id: 2,\n        name: \"洗垣 なぎさ\",\n        age: 18,\n        height: 174\n      },\n      {\n        id: 3,\n        name: \"泉 理子\",\n        age: 18\n      }\n    ];\n\n    return (\n      <div className=\"container\">\n        <header>\n          <h1>はねバド！ キャラクター一覧</h1>\n        </header>\n        <CharacterList school=\"北小町高校\" characters={characters} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import './index.css';\nimport '../node_modules/semantic-ui-css/semantic.min.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}